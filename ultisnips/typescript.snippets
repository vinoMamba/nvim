# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet cl "console.log"
console.log(${0});
endsnippet

snippet f "Arrow Function"
(${1:arg}) => {
	${0}
}
endsnippet

snippet fn "Description" b
function ${1:fn}(){
	${0}
}
endsnippet

snippet af "Async Function"
async function ${1:FunctionName}() {
	${0}
}
endsnippet

snippet ef "Export Function"
export function ${1:fn}(){
	${0}
}
endsnippet


snippet ed "Export Default Function"
export default function (){
	${0}
}
endsnippet

snippet eaf "Export Async Function"
export async function ${1:functionName}() {
	${0}
}
endsnippet

snippet tc "Try Catch"
try {
	${0}
} catch (e) {
	console.error(e);
}
endsnippet

snippet c "Comment Block"
/*
* ${0}
*/
endsnippet

snippet ec "export const" b
export const ${1:a} = ${0}
endsnippet


snippet ei "export interface" b
export interface ${1:A} {
	${0}
}
endsnippet

snippet et "export type" b
export type ${1:A} = ${0}
endsnippet


snippet pinia "create pinia" b
import {defineStore} from "pinia";

export const  ${1}= defineStore('${0}', () => {

  return {
  }
})
endsnippet
